FILE: expandTo_mismatch.kt
    @R|io/github/kyay10/highkt/TypeFunction|() public abstract interface Swapped<F, A, B> : R|{io/github/kyay10/highkt/K2<F, B, A>=} io/github/kyay10/highkt/K<io/github/kyay10/highkt/K<F, B>, A>| {
    }
    public final typealias Swap<F> = R|io/github/kyay10/highkt/K<Swapped<*, *, *>, F>|
    public final fun test(): R|kotlin/Unit| {
        lval foo: R|kotlin/Pair<kotlin/Int, kotlin/String>| = Int(1).R|kotlin/to|<R|kotlin/Int|, R|kotlin/String|>(String(Hello))
        R|io/github/kyay10/highkt/assertIsType|<R|io/github/kyay10/highkt/K<io/github/kyay10/highkt/K<kotlin/Pair<*, *>, kotlin/Int>, kotlin/String>|>(R|<local>/foo|)
        R|<local>/foo|.R|io/github/kyay10/highkt/expandTo|<R|{io/github/kyay10/highkt/K2<kotlin/Pair<*, *>, kotlin/Int, kotlin/String>=} io/github/kyay10/highkt/K<io/github/kyay10/highkt/K<kotlin/Pair<*, *>, kotlin/Int>, kotlin/String>|>()
        R|<local>/foo|.R|io/github/kyay10/highkt/expandTo|<R|{io/github/kyay10/highkt/K2<{Swap<kotlin/Pair<*, *>>=} io/github/kyay10/highkt/K<Swapped<*, *, *>, kotlin/Pair<*, *>>, kotlin/String, kotlin/Int>=} io/github/kyay10/highkt/K<io/github/kyay10/highkt/K<{Swap<kotlin/Pair<*, *>>=} io/github/kyay10/highkt/K<Swapped<*, *, *>, kotlin/Pair<*, *>>, kotlin/String>, kotlin/Int>|>()
        R|<local>/foo|.R|io/github/kyay10/highkt/expandTo|<R|{io/github/kyay10/highkt/K2<{Swap<kotlin/Pair<*, *>>=} io/github/kyay10/highkt/K<Swapped<*, *, *>, kotlin/Pair<*, *>>, kotlin/Int, kotlin/String>=} io/github/kyay10/highkt/K<io/github/kyay10/highkt/K<{Swap<kotlin/Pair<*, *>>=} io/github/kyay10/highkt/K<Swapped<*, *, *>, kotlin/Pair<*, *>>, kotlin/Int>, kotlin/String>|>()
    }
